2011.10.11
花了2、3天的时间，总算把透明窗口的代码理解搞定，同时修改其中的部分错误代码。
在调整代码的过程中干出了不少很低级的错误：


1、变量写错。有了Visaul Assist这个帮手，写代码一般都是直接选中，一不小心，就把变量选错了，导致后边写入BMP文件时，WriteFile的字节太多，以致写入失败。这个小小的错误非常难找，我以为是WriteFile的限制，缓冲了映射文件之后，问题依然有，最后才发现是计算size的时候，错误了。


2、多加了空格。在CreateDC的时候，第一个参数是L"DISPLAY"，但是代码里，在DISPLAY后边加了个空格，结果创建出来的DC是错误的，导致DC无效，后边通过DC获取像素用多少位表示时，错误了，导致保存的位图始终是黑白的。这是我在看代码的时候发现的问题，当我试图修正时，没能及时的看到是一个空格导致的错误，浪费了不少时间。


3、移位导致的错误。也是因为以前的代码有错误，我现在在审查，最后发现，错误的原因是1<<n，导致的错误，以前的代码默认限制了n是小于32的，但是，现在的机器一般n都等于32了，导致移位之后的值是1，程序接下来的执行就认为位图是有调色板的，计算DIB数据偏移的时候，就计算出错了。


4、一个位图句柄不能同时在两个DC中。在SelectObject里有明确的这么句话。原来的代码里有这么个过程，就是把ＤＤＢ转ＤＩＢ，然后ＤＩＢ再转ＤＤＢ，然后用这个ＤＤＢ位图句柄是干别的事，我就搞不明白为什么要这么绕圈子，但是，如果不转，代码就没法实现功能。整了7、8个小时才明白，原来是因为最开始的那个位图句柄是被内存DC选中了，以后再要使用它就必须先将它选出来。原来代码的处理确实是绕弯子了。
这个问题的定位花了好多时间,还以为是BitBlt、CreateDibSection出问题……

之前虽然明白它是绕弯子，却不知道怎么才能不绕，现在总算明白了。


其实，这些问题如果是动态调试一行一行的检查是可以很快发现的，但是我没有，而是看代码，导致花费了更多的时间。
之所以看代码，是因为对大部分的API都不熟悉。
如果对API熟悉了，那么找bug就应该以调试为主。


----------------------
2013-4-14 复习时遇到的问题：
     bmp图片没有保存为有颜色的图像。
     1、使用CreateCompatibleBitmap函数时，dc使用的是CreateCompatibleDC的返回值，导致BITMAP中的bmBitPixel是1，这就是说用1位保存一个像素点，导致了图片没有颜色，创建Bitmap的时候，应该使用窗口DC，也就是说，创建内存DC和创建内存DC所使用的位图时，都要使用窗口DC。

     BITMAP数据格式。
     如果是通过CreateDIBSection创建DIB位图句柄->选入MEMDC->拷贝DDB位图到DIB位图->通过DIB位图句柄获取BITMAP数据信息，那么BITMAP的最后一个成员bmBits的值就是位图的数据值。

     位图句柄。
     一个位图句柄只能被选入DC一次。
     
     
